apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'

ext {
    moduleName = 'Cisco Webex Android SDK'
    moduleGroupId = 'com.ciscowebex'
    moduleArtifactId = 'androidsdk'
    moduleVersion = '2.0.0'
    moduleDescription = 'Cisco Webex SDK for Android'
    moduleSiteUrl = 'https://developer.webex.com/getting-started.html'
    moduleProjectUrl = 'https://github.com/webex/webex-android-sdk'
    moduleGitUrl = 'https://github.com/webex/webex-android-sdk/tree/master'
    moduleConnectionUrl = 'scm:git:git://github.com/webex/webex-android-sdk.git'
    moduleDeveloperConnectionUrl = 'scm:git:ssh://github.com:webex/webex-android-sdk.git'
    moduleLicenseName = 'MIT License'
    moduleLicenseURL = 'https://raw.githubusercontent.com/webex/webex-android-sdk/master/LICENSE'
    moduleDeveloperId = 'devsupport'
    moduleDeveloperName = 'Cisco Webex for Developer'
    moduleDeveloperEmail = 'devsupport@ciscowebex.com'
    moduleDeveloperOrganization = 'Cisco System Inc'
    moduleDeveloperOrganizationURL = 'https://www.webex.com/'
}

jacoco {
    toolVersion = "0.7.5+"
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../sdk/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    def coverageSourceDirs = ['../sdk/src/main/java']
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: "../sdk", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*.ec"
    ])

    reports {
        xml.enabled = true
        html.enabled = true
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        testInstrumentationRunner "com.ciscowebex.androidsdk.WebexTestRunner"
        multiDexEnabled true
        versionCode 1
        versionName moduleVersion
        buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
        buildConfigField "String", "BUILD_REVISION", "\"${revision()}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
//          testCoverageEnabled true
            buildConfigField "String", "CLIENT_ID", getPropertyOrDefault('CLIENT_ID')
            buildConfigField "String", "CLIENT_SEC", getPropertyOrDefault('CLIENT_SEC')
            buildConfigField "String", "REDIRECT_URL", getPropertyOrDefault('REDIRECT_URL')
            buildConfigField "String", "SCOPE", getPropertyOrDefault('SCOPE')
            buildConfigField "String", "TEST_USER_NAME", getPropertyOrDefault('TEST_USER_NAME')
            buildConfigField "String", "TEST_USER_EMAIL", getPropertyOrDefault('TEST_USER_EMAIL')
            buildConfigField "String", "TEST_USER_PWD", getPropertyOrDefault('TEST_USER_PWD')
        }
        jenkins {
            initWith debug
            testCoverageEnabled true

            ndk {
                abiFilters "armeabi-v7a", "x86"
            }
        }
    }

    testBuildType "jenkins"

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        dexInProcess false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
            jacoco.includeNoLocationClasses = true
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }

    def libraryModuleName = 'sdk'
    def aarName = libraryModuleName + '-debug.aar'
    def outputAarDir = rootProject.file(libraryModuleName + '/build/outputs/aar')
    def outputAarUnzipedDir = rootProject.file(libraryModuleName + '/build/outputs/aar/unziped')
    def aarReleaseFile = rootProject.file(libraryModuleName + '/build/outputs/aar/' + aarName)

    task unzipAar(type: Copy) {
        from zipTree(aarReleaseFile)
        into outputAarUnzipedDir
    }

    task addLicenseFileInUnzipedAar(type: Copy, dependsOn: 'unzipAar') {
        def fromDir = rootProject.file('.')
        from fromDir
        into outputAarUnzipedDir
        include 'LICENSE'
        include 'CISCO_API_LICENSE.pdf'
    }

    task reZipAar(type: Zip, dependsOn: 'addLicenseFileInUnzipedAar') {
        from outputAarUnzipedDir
        include '*'
        include '*/*'
        archiveName aarName
        destinationDir(outputAarDir)
    }

    afterEvaluate {
        bundleRelease.finalizedBy(reZipAar)
        bundleDebug.finalizedBy(reZipAar)
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId moduleGroupId
            artifactId moduleArtifactId
            version moduleVersion
            artifact "$buildDir/outputs/aar/sdk-debug.aar" //aar artifact you want to publish

            artifact javadocJar
            artifact sourcesJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each { dependency ->
                    if (dependency.group?.trim()) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                        if (!dependency.transitive || dependency.name == 'androidsdk_commlib') {
                            dependencyNode.appendNode('type', 'aar')
                        }
                    }
                }
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name moduleName
                    description moduleDescription
                    url moduleSiteUrl
                    scm {
                        url moduleGitUrl
                        connection moduleConnectionUrl
                        developerConnection moduleDeveloperConnectionUrl
                    }
                    licenses {
                        license {
                            name moduleLicenseName
                            url moduleLicenseURL
                        }
                    }
                    developers {
                        developer {
                            id moduleDeveloperId
                            name moduleDeveloperName
                            email moduleDeveloperEmail
                            organization moduleDeveloperOrganization
                            organizationUrl moduleDeveloperOrganizationURL
                        }
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name 'DevSnapshot'
            url "http://engci-maven.cisco.com/artifactory/webexsdk-SNAPSHOT/"
            credentials {
                username "$CEC_Username"
                password "$ArtifactoryApiKey"
            }
        }

        maven {
            name 'Release'
            url "http://engci-maven.cisco.com/artifactory/webexsdk/"
            credentials {
                username "$CEC_Username"
                password "$ArtifactoryApiKey"
            }
        }
    }
}

dependencies {
    //compile fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.google.dagger:dagger-compiler:2.22.1'
    kapt 'com.google.dagger:dagger-compiler:2.22.1'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.22.1'

    implementation('com.ciscowebex:androidsdk_commlib:2.0.0@aar', {
        transitive = true
        changing = true
    })
    testCompile 'com.squareup.okhttp3:okhttp:3.9.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

static def buildTime() {
    return new Date().format("yyyy_MM_dd_HH_mm_ss")
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString().replaceAll("\n", "")
}

def getPropertyOrDefault(prop, defaultValue = '') {
    def value = System.getProperty(prop)
    return value ? '\"' + value + '\"' : '\"' + defaultValue + '\"'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from "../LICENSE"
    from "../CISCO_API_LICENSE.pdf"
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    android.libraryVariants.all { variant ->
        description "Generates Javadoc for $variant.name."
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        owner.classpath += files(variant.javaCompiler.classpath.files) + files(ext.androidJar)
    }
    source = android.sourceSets.main.java.srcDirs
    options.encoding('UTF-8')
    options.setUse(true)
    options.author(true)
    options.version(true)
    options.windowTitle(moduleName + ' ' + moduleVersion)
    options.docTitle(moduleName + ' ' + moduleVersion)
    options.links("http://docs.oracle.com/javase/7/docs/api/");
    options.links("http://d.android.com/reference/");
    options.footer('Copyright &#169; 2016&#8211;2017 Cisco System Inc.  All Rights Reserved.')
    exclude '**/BuildConfig.java'
    exclude '**/R.java'
    exclude '**/internal/*.java'
    exclude '**/utils/**'
    exclude '**/OAuthTestUserAuthenticator.java'
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
